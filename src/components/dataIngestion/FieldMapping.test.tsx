import React from 'react';
import { render, screen, fireEvent, act } from '@testing-library/react';
import FieldMapping from './FieldMapping';
import { DataType, FieldMapping as FieldMappingType, RuleType, RuleValidationState } from '../../contexts/dataIngestionContext';

// üîß Ê®°Êì¨Â∞á JSON Ë≥áÊñôËΩâÊèõÁÇ∫Ê®πÁãÄÁØÄÈªûÁöÑÂ∑•ÂÖ∑ÂáΩÂºè
jest.mock('../../utils/dataUtils', () => ({
  jsonToTreeNodes: jest.fn(),
  // findTreeNodeByKey Âú®ÂÖÉ‰ª∂ÂÖßÊúâÂÆöÁæ©ÔºåÈÄôË£°ÂèØ‰∏çÈ°çÂ§ñÊ®°Êì¨
}));

// üîß Ê®°Êì¨ Tree ÁµÑ‰ª∂Ôºà‰æÜËá™ primereact/treeÔºâÔºåÁ∞°ÂåñÁÇ∫ÈªûÊìäÈ†ÖÁõÆÁõ¥Êé•Êõ¥Êñ∞ÈÅ∏ÂèñÂÄº
jest.mock('primereact/tree', () => ({
  Tree: ({ value, selectionMode, selectionKeys, onSelectionChange }: any) => (
    <ul>
      {value.map((node: any) => (
        <li key={node.key} onClick={() => onSelectionChange({ value: node.key })}>
          {node.label}
        </li>
      ))}
    </ul>
  )
}));

// üîß Ê®°Êì¨ i18n
jest.mock('react-i18next', () => ({
  useTranslation: () => ({
    t: (key: string) => {
      const translations: Record<string, string> = {
        'apiFields': 'API Fields',
        'fieldMappingTable': 'Field Mapping Table',
        'addField': 'Êñ∞Â¢ûÊ¨Ñ‰Ωç'
      };
      return translations[key] || key;
    }
  })
}));

describe('FieldMapping ÂÖÉ‰ª∂', () => {
  // Ê∫ñÂÇôÊ®°Êì¨ÁöÑ API ÂõûÂÇ≥Ë≥áÊñôÂèäÂ∞çÊáâÁöÑÊ®πÁãÄÁµêÊßãÁØÄÈªû
  const apiDataSample = { name: 'Alice', age: 30 };
  const treeNodes = [
    { key: 'name', label: 'name', data: { value: 'Alice' } },
    { key: 'age', label: 'age', data: { value: 30 } }
  ];
  const addMapping = jest.fn();
  const updateFieldMapping = jest.fn();
  const removeFieldMapping = jest.fn();
  const updateFieldPK = jest.fn();
  const setFieldMappings = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    const { jsonToTreeNodes } = require('../../utils/dataUtils');
    jsonToTreeNodes.mockReturnValue(treeNodes);
  });

  it('Êú™ÈÅ∏ÊìáÊ¨Ñ‰ΩçÊôÇÔºåÈªûÊìäÂè≥ÁÆ≠È†≠‰∏çÊáâÊñ∞Â¢û mapping', async () => {
    const props = {
      fieldMappings: [], setFieldMappings,
      apiData: apiDataSample,
      addMapping, updateFieldMapping, removeFieldMapping, updateFieldPK
    };
    await act(async () => {
      render(<FieldMapping {...props} />);
    });
    // Â∞öÊú™ÈªûÈÅ∏‰ªª‰ΩïÊ®πÁØÄÈªûÂ∞±Áõ¥Êé•ÈªûÊìäÂè≥ÁÆ≠È†≠ÊåâÈàï
    const addButton = screen.getByLabelText('Add Field');
    await act(async () => {
      fireEvent.click(addButton);
    });
    // Ê≠§ÊôÇÂõ†Ê≤íÊúâÈÅ∏ÊìáÊ¨Ñ‰ΩçÔºåaddMapping ‰∏çÊáâË¢´ÂëºÂè´
    expect(addMapping).not.toHaveBeenCalled();
  });

  it('ÈªûÈÅ∏Ê®πÁãÄÁØÄÈªû‰∏¶ÈªûÊìäÂè≥ÁÆ≠È†≠ÔºåÊáâÊñ∞Â¢ûÂ∞çÊáâÁöÑ field mapping', async () => {
    const props = {
      fieldMappings: [], setFieldMappings,
      apiData: apiDataSample,
      addMapping, updateFieldMapping, removeFieldMapping, updateFieldPK
    };
    await act(async () => {
      render(<FieldMapping {...props} />);
    });
    // Ê®°Êì¨‰ΩøÁî®ËÄÖÈªûÊìäÊ®πÁãÄÁöÑ "name" ÁØÄÈªû
    fireEvent.click(screen.getByText('name'));
    // ÈªûÊìä "Add Field" ÁÆ≠È†≠ÊåâÈàï
    await act(async () => {
      fireEvent.click(screen.getByLabelText('Add Field'));
    });
    // Êñ∞Â¢ûÁöÑ mapping ÊáâÂ∞çÊáâÈÅ∏ÂèñÁöÑ 'name' ÁØÄÈªûÂÖßÂÆπ
    expect(addMapping).toHaveBeenCalledWith(expect.objectContaining({
      id: 'name',                 // Â∞çÊáâÈÅ∏ÂèñÁØÄÈªûÁöÑ key
      sourceField: 'name',        // Â∞çÊáâÁØÄÈªû label
      sampleValue: 'Alice',       // Â∞çÊáâÁØÄÈªûË≥áÊñôÂÄº
      targetField: '',            // ÂàùÂßã targetField ÁÇ∫Á©∫
      dataType: 'string',         // Â≠ó‰∏≤È°ûÂûã
      ruleType: '',               // È†êË®≠ÁÑ°Ê∏ÖÁêÜË¶èÂâá
      isPK: true                  // Á¨¨‰∏ÄÁ≠ÜÊò†Â∞ÑÈ†êË®≠ÁÇ∫ PK
    }));
  });

  it('Ëã•ÈÅ∏ÂèñÁöÑÊ¨Ñ‰ΩçÂ∑≤Â≠òÂú®Êñº mapping ‰∏≠ÔºåÈªûÊìäÂè≥ÁÆ≠È†≠‰∏çÊáâÈáçË§áÊñ∞Â¢û', async () => {
    // ÂàùÂßãÂ∑≤Êúâ id 'name' ÁöÑÊò†Â∞Ñ
    const initialMapping: FieldMappingType = {
      sourceField: 'name', sampleValue: 'Alice', targetField: '', dataType: DataType.String,
      id: 'name', ruleType: RuleType.Empty, cleaningRule: '', isPK: true,
      data: {}, targetFieldTouched: false, targetFieldError: '', ruleValidationState: RuleValidationState.None, cleaningRuleError: '', cleaningRuleTouched: false
    };
    const props = {
      fieldMappings: [initialMapping], setFieldMappings,
      apiData: apiDataSample,
      addMapping, updateFieldMapping, removeFieldMapping, updateFieldPK
    };
    await act(async () => {
      render(<FieldMapping {...props} />);
    });
    // Ê®°Êì¨ÈªûÊìäÊ®πÁãÄ "name" ÁØÄÈªûÔºàËàáÂ∑≤ÊúâÊò†Â∞ÑÈáçË§áÔºâ
    fireEvent.click(screen.getByText('name'));
    // ÈªûÊìäÂè≥ÁÆ≠È†≠ÊåâÈàï
    await act(async () => {
      fireEvent.click(screen.getByLabelText('Add Field'));
    });
    // Âõ†ÁÇ∫ 'name' Â∑≤Â≠òÂú®Êñº fieldMappingsÔºå‰∏≠ÈÄîÊáâÊ™¢Êü• alreadyExists = trueÔºåÂõ†Ê≠§‰∏çÊáâÂÜçÂëºÂè´ addMapping
    expect(addMapping).not.toHaveBeenCalled();
  });

  it('ÈªûÊìä "Êñ∞Â¢ûÊ¨Ñ‰Ωç" (Âä†Ëôü) ÊåâÈàïÊáâÊñ∞Â¢ûÁ©∫ÁôΩ mappingÔºåÂÖ∂ PK ÁãÄÊÖãÂèñÊ±∫ÊñºÁï∂Ââç mapping Êï∏Èáè', async () => {
    // Ê°à‰æã1ÔºöÁõÆÂâçÁÑ°‰ªª‰Ωï mappingÔºåÈªûÊìäÂä†ËôüÂæåÊáâÊñ∞Â¢û isPK=true ÁöÑÊò†Â∞Ñ
    let props = {
      fieldMappings: [], setFieldMappings,
      apiData: apiDataSample,
      addMapping, updateFieldMapping, removeFieldMapping, updateFieldPK
    };
    let rerender: any;
    await act(async () => {
      const renderResult = render(<FieldMapping {...props} />);
      rerender = renderResult.rerender;
    });
    const addFieldButton = screen.getByRole('button', { name: 'Êñ∞Â¢ûÊ¨Ñ‰Ωç' });
    await act(async () => {
      fireEvent.click(addFieldButton);
    });
    expect(addMapping).toHaveBeenCalledWith(expect.objectContaining({
      id: '', sourceField: '', sampleValue: '', targetField: '',
      isPK: true  // Á¨¨‰∏ÄÁ≠ÜÊñ∞Â¢ûÁÇ∫ PK
    }));
    jest.clearAllMocks();
    // Ê°à‰æã2ÔºöÂ∑≤Êúâ‰∏ÄÁ≠Ü mappingÔºåÂÜçÊ¨°ÈªûÊìäÂä†ËôüÔºåÊñ∞Â¢û mapping ÁöÑ isPK ÊáâÁÇ∫ falseÔºàÁ¢∫‰øùÂè™‰øùÁïô‰∏ÄÂÄã PKÔºâ
    const existingMapping: FieldMappingType = {
      sourceField: 'fieldX', sampleValue: '123', targetField: '', dataType: DataType.String,
      id: 'fieldX', ruleType: RuleType.Empty, cleaningRule: '', isPK: true,
      data: {}, targetFieldTouched: false, targetFieldError: '', ruleValidationState: RuleValidationState.None, cleaningRuleError: '', cleaningRuleTouched: false
    };
    props = {
      fieldMappings: [existingMapping], setFieldMappings,
      apiData: apiDataSample,
      addMapping, updateFieldMapping, removeFieldMapping, updateFieldPK
    };
    await act(async () => {
      rerender(<FieldMapping {...props} />);
    });
    await act(async () => {
      fireEvent.click(screen.getByRole('button', { name: 'Êñ∞Â¢ûÊ¨Ñ‰Ωç' }));
    });
    expect(addMapping).toHaveBeenCalledWith(expect.objectContaining({ isPK: false }));
  });
});
